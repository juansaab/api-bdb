#%RAML 1.0
title: API - Biblioteca Digital de Bogotá
version: 1.0
documentation: !include documentation.raml

types: !include types.raml

resourceTypes:
  getCollection:
    get:
      description: Get all the <<resourcePathName | !pluralize | !uppercamelcase>>
      is: [ paginated, sortable, filterable ]

  collection:
    get:
      description: Get all the <<resourcePathName | !pluralize | !uppercamelcase>>
      is: [ paginated, sortable, filterable ]
    post:
      is: [ createItemPost, needAdmin ]

  singleItem:
    get:
      is: [ singleItemResponse ]
    patch:
      is: [ singleItemResponse, responseError, needAdmin ]
      description: Update the given <<resourcePathName | !singularize | !uppercamelcase>>
      body:
        application/json:
          type: <<resourcePathName | !singularize | !uppercamelcase>>Request
    delete:
      is: [ responseError, needAdmin, singleItemDelete ]

/api/users:
  description: !include users-description.md
  type: getCollection
  get:
    is: [ needAdmin, searchable ]
    queryParameters:
      email:
        type: string
        description: "Correo para revisar si existe. Con este parámetro la ruta es pública."
  post:
    is: [ withToken, createItemPost ]
  /{user-id}:
    type: singleItem
    patch:
      is: [ needOwner ]

  /login:
    post:
      is: [ withToken, responseError ]
      description: "Logs in an User"
      body:
        application/json:
          type: Auth
          example:  {
            email: "marie@curie.com",
            password: "asd|@123"
          }
  /password/recovery/{email}:
    get:
      description: "Requires a password recovery link for an user"
      responses:
        200:
          description: "A reset link has been send to the email specified"
        400:
          body:
            application/json:
              type: DetailedAnswer
              example:
                {
                  "message": "There was an error on the request",
                  "errors": {
                    "attempts": [
                      "Too many password request for the given email"
                    ],
                    "email": [
                      "The given email is invalid or empty"
                    ]
                  }
                }
    post:
      is: [ responseError ]
      description: "Validates a password reset token"
      body:
        application/json:
          type: object
          properties:
            token: string
      responses:
        200:
          description: "The provided password token is valid"
  /password/reset/{email}:
    post:
      is: [ withToken, responseError ]
      description: "Resets the password for the given user."
      body:
        application/json:
          type: object
          properties:
            password: string
            token: string
      responses:
        200:
          description: "Password changed succesfully."

/api/contents:
  type: collection
  get:
    is: [ searchable ]
  post:
    is: [ needOwner ]
  /{content-id}:
    type: singleItem
    patch:
      is: [ needOwner ]

/api/collections:
  type: collection
  /{collection-slug}:
    type: singleItem

##############################################
##  Trait definitions                       ##
##############################################

traits:
  needOwner:
    securedBy: [token: { scopes: [ owner ] }]
  needAdmin:
    securedBy: [token: { scopes: [ admin ] }]

  paginated:
    queryParameters:
      items?:
        type: integer
        description: "Número de items por página."
      page?:
        type: integer
        description: "Número de página."
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              current_page: integer
              first_page_url: string
              from: integer
              last_page: integer
              last_page_url: string
              next_page_url: string
              path: string
              per_page: integer
              prev_page_url: string
              to: integer
              total: integer
              data: <<resourcePathName | !singularize | !uppercamelcase>>Expanded[]

  sortable:
    queryParameters:
      orderby?:
        type: string
        description: "Criteros de ordenamiento de los resultados."
  filterable:
    queryParameters:
      filter?:
        type: object
        properties:
          //:
            type: string
        description: "Criteros de filtrado de los resultados."
  searchable:
    queryParameters:
      q?:
        type: string
        description: "Criteros de búsqueda de los resultados."

  responseError:
    responses:
      4XX:
        description: "Invalid request."
        body:
          application/json:
            type: DetailedAnswer
            example:
              {
                "message": "The given data was invalid.",
                "errors": {
                  "field_name_1": [
                    "Invalid data provided for field_name_1."
                  ],
                  "field_name_2": [
                    "field_name_2 is required."
                  ]
                }
              }

  singleItemResponse:
    description: Retrieve the given <<resourcePathName | !singularize | !uppercamelcase>>
    is: [ hasType: {type: <<resourcePathName | !singularize | !uppercamelcase>>Expanded} ]
      404:
        description: "<<resourcePathName | !singularize | !uppercamelcase>> not found."

  singleItemDelete:
    description: Delete the given <<resourcePathName | !singularize | !uppercamelcase>>
    responses:
      200:
        body:
          application/json:
            type: DetailedAnswer
            example:
              {
                "message": "Object deleted"
              }

  createItemPost:
    description: Create a new <<resourcePathName | !singularize | !uppercamelcase>>
    body:
      multipart/form-data:
        type: <<resourcePathName | !singularize | !uppercamelcase>>Request
      application/json:
        type: <<resourcePathName | !singularize | !uppercamelcase>>Request
    is: [ responseError, hasType: {type: <<resourcePathName | !singularize | !uppercamelcase>>Expanded} ]

  withToken:
    is: [hasType: {type: UserWithToken}]

  hasType:
    responses:
      200:
        body:
          application/json:
            type: <<type>>


##############################################
##  Security Schemes definitions            ##
##############################################

securitySchemes:
  token:
    type: Pass Through
    description: "Authentication by header"
    describedBy:
      headers:
        Authorization:
          description: "Use the Bearer keyword. Example Authorization Bearer [API_key]"
          type: string
